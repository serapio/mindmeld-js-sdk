{"version":3,"file":"cards.min.js","sources":["cards.js"],"names":[],"mappings":"","sourcesContent":["/* global Handlebars, jQuery, Spinner */\n/* exported Cards */\n\n;(function (Handlebars, $, Spinner) {\n\n  // options for initialization\n  var options = {};\n  // Store how wide a row of cards is, to intelligently resize on window resize events.\n  var rowWidth, lastCardWidth;\n  // Spinner for loading\n  var spinner;\n\n  // Thanks koorchik, from http://stackoverflow.com/questions/8366733/external-template-in-underscore\n  var render = function(templateUrl, templateData) {\n    if ( !render.tmplCache ) {\n      render.tmplCache = {};\n    }\n\n    if ( ! render.tmplCache[templateUrl] ) {\n      var templateString;\n      $.ajax({\n        url: templateUrl,\n        method: 'GET',\n        async: false,\n        success: function(data) {\n          templateString = data;\n        }\n      });\n\n      render.tmplCache[templateUrl] = Handlebars.compile(templateString);\n    }\n\n    return render.tmplCache[templateUrl](templateData);\n  };\n\n  /*\n   * Place the card as the index-th child of #cards\n   * This affects the DOM only; not the visual order\n   */\n  var placeCardInDom = function ($card, index) {\n    var $cards = $(options.cardSelector);\n    if ($cards.length <= index) {\n      $(options.parentSelector).append($card);\n    } else {\n      $card.insertBefore($cards[index]);\n    }\n  };\n\n  /*\n   * Calculates the screen position for the card.\n   * Cards are placed left to right, top to bottom.\n   */\n  var calculateCardScreenPosition = function ($card, index, existingCardSizes) {\n    var parentWidth = $(options.parentSelector).width();\n    var cardWidth = $card.outerWidth(true);\n    var cardHeight = $card.outerHeight(true);\n    var cardLeft, cardTop;\n\n    // Store this for layout of successive elements\n    existingCardSizes[$card[0].id] = {\n      height: cardHeight,\n      width: cardWidth\n    };\n\n    var numCardsInRow = Math.max( 1, Math.floor(parentWidth / cardWidth) );\n    // Store this for resize events.\n    rowWidth = numCardsInRow*cardWidth;\n    lastCardWidth = cardWidth;\n\n    if ( cardWidth > parentWidth ) {\n      // Corner case; just stack the cards vertically\n      cardLeft = 0;\n      cardTop = index*cardHeight;\n    } else {\n      // Normal case; stack them left to right, top to bottom\n      cardLeft = (index % numCardsInRow)*cardWidth;\n      cardTop = 0;\n      if (index >= numCardsInRow) {\n        var $cards = $(options.cardSelector);\n        for (var i = (index % numCardsInRow); i < index; i += numCardsInRow) {\n          cardTop += existingCardSizes[$cards[i].id].height;\n        }\n      }\n\n    }\n\n    return { top: cardTop, left: cardLeft };\n  };\n\n  /*\n   * Layout a single card, given the index and previous card sizes.\n   */\n  var layoutCard = function ($card, index, existingCardSizes) {\n    // Set the z-index so that cards cleanly move over one another.\n    // This applies to their pre-animation index\n    var BASE_Z_INDEX = 50;\n    $card.css('z-index', BASE_Z_INDEX - index);\n\n    var position = calculateCardScreenPosition($card, index, existingCardSizes);\n    if ( $card.attr('new') ) {\n      $card.attr('new', null);\n      $card.css('left', position.left + 'px');\n      $card.css('top', position.top + 'px');\n\n      // Replace with desired entry animation\n      $card.transition({opacity: 1}, options.animationDuration);\n    } else {\n      // Existing card, just move it\n      $card.transition({\n        left: position.left,\n        top: position.top,\n      }, options.animationDuration);\n    }\n  };\n\n  var MindMeldCards = {\n\n    /**\n     * Initialize the cards widget with provided options.\n     *\n     * options: {\n     *   templatePath: (String) path to Handlebars template for the card.\n     *   parentSelector: (String) jQuery selector for parent element of cards, eg '#cards'.\n     *     This element must have a non-zero width.\n     *   cardSelector: (String) jQuery selector for the cards, eg '.card'.\n     *   animationDuration: (Number) Duration (in ms) for the animations.  Default 500.\n     * }\n     */\n    initialize: function (_options) {\n      options = _options;\n      if ( !('animationDuration' in options) ) {\n        options.animationDuration = 500;\n      }\n\n      //Re-layout cards on window size change.\n      $(window).resize(function () {\n        if (\n            $(options.parentSelector).width() < rowWidth ||\n            $(options.parentSelector).width() >= rowWidth + lastCardWidth\n          ) {\n          // parent is too small to hold existing row, or big enough to hold another card\n          //console.log('Parent has significantly reized; re-layout cards');\n          MindMeldCards.layoutCards();\n        }\n      });\n    },\n\n    /**\n     * cards: [{title, }, ...]\n     * onClick: function(event) called onClick, with event.data = {card:card}.\n     *   Like jQuery, return false to override default click behaviour.\n     */\n    setCards: function (cards, onClick) {\n      console.log('Appending cards', cards);\n      //TODO: Handle no cards case.\n\n      // First set the DOM correctly\n      cards.forEach( function (card, i) {\n        var $card = $('#' + card.documentid);\n\n        if ($card.length) {\n          // Existing card; place correctly.\n          placeCardInDom($card, i);\n        } else {\n          // New card; render and place in DOM\n          $card = $( render( options.templatePath, card ) );\n\n          $card.css('opacity', 0);\n          $card.attr('new', true);\n          $card.on('click', { card: card }, function (e) {\n            $(options.cardSelector).removeClass('selected');\n            $card.addClass('selected');\n            return onClick(e);\n          });\n\n          placeCardInDom($card, i);\n          $card.imagesLoaded( function () {\n            $card.find('.not-loaded').removeClass('not-loaded');\n            //layoutCard($card, i);\n          });\n        }\n      });\n      // Delete the old cards still in the DOM.  They will all be at the end.\n      var $domCards = $(options.cardSelector);\n      for (var i = cards.length; i < $domCards.length; i++) {\n        // Our removal animation.  Modify to taste, but make sure to remove the element\n        // Also, tell jshint that we're making a function in a loop safely.\n        /* jshint -W083 */\n        $($domCards[i]).transition({opacity: 0}, options.animationDuration, function onComplete () { $(this).remove(); });\n        /* jshint +W083 */\n      }\n\n      // Now layout the cards\n      MindMeldCards.layoutCards();\n      // Need to triger another layout when the images are loaded, because the\n      // image sizes may have changed\n      $(options.cardSelector).imagesLoaded( function () {\n        MindMeldCards.layoutCards();\n      });\n\n    },\n\n    /**\n     * Layout the cards that are in the DOM.\n     * This is generally only used internally, but if you need to\n     * re-layout due to parent div size change, you can call it.\n     * It should be idempotent.\n     */\n    layoutCards: function () {\n      // Keep track of the sizes of cards, to know where to place the next one.\n      // Map from documentid to {height:, width:}\n      var existingCardSizes = {};\n\n      $(options.cardSelector).each(function (index, cardElt) {\n        layoutCard( $(cardElt), index, existingCardSizes );\n      });\n\n    },\n\n    /**\n     * Set the cards to a loading state.  Should be set to true when new results\n     * are expected (eg, when a getDocuments request is sent to the API).  It's\n     * the caller's responsibility to set it to false when everything is done.\n     */\n    setLoading: function(isLoading) {\n      $(options.parentSelector).toggleClass('loading', isLoading);\n      if (isLoading) {\n        // Spin the spinner\n        if (spinner) {\n          spinner.spin($(options.parentSelector)[0]);\n        } else if (Spinner) {\n          // If we don't have a Spinner, just don't show the animation\n          spinner = new Spinner({\n            length: 60,\n            width: 15,\n            top: '200px'\n          }).spin($(options.parentSelector)[0]);\n        }\n      } else {\n        // Hide the spinner\n        spinner && spinner.stop();\n      }\n    }\n\n  };\n\n  window.MindMeldCards = MindMeldCards;\n\n})(Handlebars, jQuery, Spinner);\n"],"sourceRoot":"/source/"}