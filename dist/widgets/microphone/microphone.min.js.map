{"version":3,"file":"microphone.min.js","sources":["microphone.js"],"names":[],"mappings":"","sourcesContent":["/* global MM */\n/* exported MindMeldMicrophone */\n\n/**\n * Adds the MindMeldMicrophone singleton object to the global namespace. The MindMeldMicrophone\n * exposes the following methods:\n * - initialize(): sets the listener config for MM.Listener, registers click handlers, and sets up volume monitor\n * - start(): starts recording\n * - stop(): stops recording\n * - listening(): returns a boolean indicating whether the mic is listening\n * - on(event, callback, context): register for a MindMeldMicrophone event. Events exposed:\n *  - 'init': fired after initialize() finishes\n *  - 'result': there is a speech-to-text result.  Passes a result object:\n *      `result = { transcript: (String), final: (Boolean) }`\n *  - 'start': the microphone starts recording\n *  - 'stop': the microphone stops recording\n *  - 'error': there was an error with the microphone.  Passes an event object:\n *      `event = { error: (String) }`\n */\n\n(function microphone (MM) {\n  'use strict';\n\n  var MindMeldMicrophone = window.MindMeldMicrophone = window.MindMeldMicrophone || {};\n  var listener;\n  var volumeMonitor;\n  var microphoneElement;\n\n  /**\n   * `initialize()` checks for speech recognition support, initializes\n   * the volume monitor, and initializes mindmeld-microphone's\n   * click handlers.  It will emit an `'init'` event when successfully\n   * completed, or an `'error'` event in the case of an error.\n   *\n   * @param element a vanilla DOM element that contains the microphone.\n   * Generally `document.getElementById('mindmeld-microphone')`\n   */\n  MindMeldMicrophone.initialize = function initialize (element) {\n    microphoneElement = element;\n    if (! MM.support.speechRecognition) {\n      microphoneElement.classList.add('disabled');\n      var errorMessage = 'This browser does not support speech recognition';\n      MindMeldMicrophone.publishEvent('error', errorMessage);\n      return;\n    }\n\n    initMMListener();\n    initVolumeMonitor();\n    initClickHandlers();\n    initUIHandlers();\n    MindMeldMicrophone.publishEvent('init');\n  };\n\n  // Sets the listener config for a new MM.Listener The mindmeld-microphone's\n  // event handlers publish the Listener events like onResult and onEnd\n  function initMMListener () {\n    listener = MM.listener = new MM.Listener({\n\n      interimResults: true,\n\n      onResult: function (result, resultIndex, results, event) {\n        MindMeldMicrophone.publishEvent('result', result, resultIndex, results, event);\n      },\n\n      onStart: function (event) {\n        MindMeldMicrophone.publishEvent('start', event);\n      },\n\n      onEnd: function (event) {\n        MindMeldMicrophone.publishEvent('end', event);\n      },\n\n      onError: function (error) {\n        MindMeldMicrophone.publishEvent('error', error);\n      }\n    }\n\n  );\n}\n\n  // Initializes the volume monitor used to animate the microphone\n  // as the volume changes\n  function initVolumeMonitor () {\n    var volumePulser = microphoneElement.querySelector('.volume-pulser');\n\n    volumeMonitor = new window.VolumeMonitor({\n      listener: listener,\n\n      // Animate volume pulser by scaling a background circle based on volume\n      onVolumeChange: function onVolumeChanged (volume) {\n        var scale = ((volume / 100) * 0.5) + 1.0;\n        volumePulser.style.transform = 'scale(' + scale + ')';\n      },\n\n      // Hide volume pulser on stop\n      onStop: function onVolumeMonitorStopped () {\n        volumePulser.style.transform = 'scale(0.9)';\n      },\n\n      // Public microphone error event when there is a volume monitor error\n      onError: function onVolumeMonitorError (error) {\n        MindMeldMicrophone.publishEvent('error', error);\n      }\n    });\n  }\n\n  // Initializes mouse click handlers to start/stop the microphone\n  function initClickHandlers () {\n    var holdTimeout = null;\n    var holdDuration = 1000;\n\n    var micButton = microphoneElement.querySelector('.icon-container');\n    micButton.addEventListener('mousedown', function onMouseDown () {\n      if (listener.listening) {\n        MindMeldMicrophone.stop();\n      } else {\n        holdTimeout = setTimeout(\n          function startContinuousOnHold () {\n            MindMeldMicrophone.start(true); // start mic in continuous mode\n            holdTimeout = null;\n          },\n          holdDuration\n        );\n      }\n    });\n\n    micButton.addEventListener('mouseup', function onMouseUp () {\n      if (holdTimeout !== null) {\n        // We have not reached the hold timeout yet, start mic in normal mode\n        clearTimeout(holdTimeout);\n        holdTimeout = null;\n        MindMeldMicrophone.start();\n      }\n    });\n\n    micButton.addEventListener('mouseout', function onMouseOut () {\n      clearTimeout(holdTimeout);\n      holdTimeout = null;\n    });\n  }\n\n  // Subscribes to microphone start/stop events to add CSS classes\n  // indicating listening, lock, or waiting state\n  function initUIHandlers () {\n    MindMeldMicrophone.on('start', function onMicrophoneStart () {\n      microphoneElement.classList.add('listening');\n      if (listener.continuous) {\n        microphoneElement.classList.add('lock');\n      }\n    });\n\n    MindMeldMicrophone.on('end', function onMicrophoneEnd () {\n      microphoneElement.classList.remove('listening');\n      microphoneElement.classList.remove('lock');\n    });\n\n  }\n\n\n  // Publicly Accessible Methods of mindmeld-microphone widget\n\n  /**\n   * Start recording\n   */\n  MindMeldMicrophone.start = function start (continuous) {\n    listener.continuous = continuous;\n    listener.start();\n    volumeMonitor.start();\n  };\n\n  /**\n   * Returns if the microphone is currently listening\n   */\n  MindMeldMicrophone.listening = function listening () {\n    return listener.listening;\n  };\n\n  /**\n   * Stops recording\n   */\n  MindMeldMicrophone.stop = function stop () {\n    listener.stop();\n  };\n\n  // Event Dispatcher\n  var subscriptions = {};\n\n  /**\n   * Subscribe to microphone events\n   */\n  MindMeldMicrophone.on = function on (eventName, callback, context) {\n    if (! subscriptions[eventName]) {\n      subscriptions[eventName] = [];\n    }\n    var subscription = {\n      callback: callback,\n      context: context\n    };\n    subscriptions[eventName].push(subscription);\n  };\n\n  /**\n   * Publish microphone events to subscribers\n   */\n  MindMeldMicrophone.publishEvent = function publishEvent (eventName) {\n    var subscribers = subscriptions[eventName];\n    if (subscribers !== undefined) {\n      var args = Array.prototype.slice.call(arguments, 1);\n      subscribers.forEach(\n        function invokeCallback (subscription) {\n          var context = subscription.context || this;\n          subscription.callback.apply(context , args);\n        }\n      );\n    }\n  };\n\n}(MM));\n"],"sourceRoot":"/source/"}