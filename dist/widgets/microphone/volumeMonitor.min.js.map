{"version":3,"file":"volumeMonitor.min.js","sources":["volumeMonitor.js"],"names":[],"mappings":"","sourcesContent":["/* exported VolumeMonitor */\n// Volume Monitor\n\n(function volumeMonitor () {\n    'use strict';\n\n    window.navigator.getUserMedia = (window.navigator.getUserMedia ||\n        window.navigator.webkitGetUserMedia ||\n        window.navigator.mozGetUserMedia ||\n        window.navigator.msGetUserMedia);\n    var AudioContext = window.AudioContext || window.webkitAudioContext;\n    var Uint8Array = window.Uint8Array;\n\n    var VolumeMonitor = function (config) {\n        this.listener = config.listener;\n        this.onError = config.onError;\n        this.onVolumeChange = config.onVolumeChange;\n        this.onStop = config.onStop;\n\n        this.stream = null;\n        this.context = null;\n        this.analyzer = null;\n        this.frequencies = null;\n        this.times = null;\n        this.audioStarted = false;\n    };\n\n    VolumeMonitor.prototype.start = function () {\n        var self = this;\n\n        if (!this.audioStarted) {\n            this.context = new AudioContext();\n            this.analyzer = this.context.createAnalyser();\n            this.analyzer.smoothingTimeConstant = 0.18;\n            this.analyzer.fftSize = 256;\n\n            this.frequencies = new Uint8Array(this.analyzer.frequencyBinCount);\n            this.times = new Uint8Array(this.analyzer.frequencyBinCount);\n\n            window.navigator.getUserMedia({ audio: true }, microphoneReady, function (err) {\n                self.onError('The following error occurred: ' + err);\n            });\n\n            this.audioStarted = true;\n        } else {\n            loop();\n        }\n\n\n        function microphoneReady (stream) {\n            self.stream = stream;\n            var stream_source = self.context.createMediaStreamSource(stream);\n            stream_source.connect(self.analyzer);\n            loop();\n        }\n\n        function loop () {\n            if (!(self.listener.pending || self.listener.listening)) {\n                self.stop();\n                return;\n            }\n\n            self.analyzer.getByteFrequencyData(self.frequencies);\n            self.analyzer.getByteTimeDomainData(self.times);\n\n            self.onVolumeChange && self.onVolumeChange(getVolume());\n\n            window.setTimeout(loop, 75);\n        }\n\n        function getVolume () {\n            return window.parseInt(getFrequencyRange(0, self.analyzer.frequencyBinCount - 1), 10);\n        }\n\n        function getFrequencyRange (from, to) {\n            var volume = 0;\n\n            for (var i = from; i < to; i++) {\n                volume += self.frequencies[i];\n            }\n\n            return volume / ( to - from );\n        }\n    };\n\n    VolumeMonitor.prototype.stop = function () {\n        this.onStop && this.onStop();\n        // stop recording\n        this.stream && this.stream.stop();\n        this.audioStarted = false;\n    };\n\n    window.VolumeMonitor = VolumeMonitor;\n\n})();\n"],"sourceRoot":"/source/"}