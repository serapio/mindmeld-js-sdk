{"version":3,"file":"searchInput.min.js","sources":["searchInput.js"],"names":[],"mappings":"","sourcesContent":["/* exported MindMeldSearchInput */\n\n;(function searchInput () {\n  'use strict';\n\n  var MindMeldSearchInput = window.MindMeldSearchInput = window.MindMeldSearchInput || {};\n\n  var containerElement;\n  var textElement;\n\n\n  /**\n   * Initialize the search element.  Pass in the DOM (not jQuery) element\n   * that contains the search input.  In the provided html snippet, it would be\n   * `document.querySelector('.mindmeld-search')`.\n   */\n  MindMeldSearchInput.initialize = function initialize (element) {\n    containerElement = element;\n    textElement = containerElement.querySelector('.mindmeld-search-text');\n    textElement.addEventListener('focus', function() {\n      MindMeldSearchInput.setFinal(false);\n    });\n\n    textElement.addEventListener('keypress', function (e) {\n      // We are looking for CR (keyCode 13)\n      var keyCode = e.keyCode;\n      if (keyCode !== 13) {\n        return;\n      }\n\n      // User pressed return\n      textElement.blur();\n      var text = MindMeldSearchInput.getText().trim();\n      MindMeldSearchInput.setText(text, true);\n      MindMeldSearchInput.publishEvent('submitText', text);\n\n      e.preventDefault();\n    });\n\n    textElement.addEventListener('click', function (e) {\n      //We want to focus on the span inside.\n      textElement.querySelector('span').focus();\n    });\n    \n    containerElement.querySelector('.mindmeld-search-glass').addEventListener('click',\n      function (e) {\n        console.log('Clicking glass');\n        MindMeldSearchInput.setFinal(true);\n        var text = MindMeldSearchInput.getText().trim();\n        MindMeldSearchInput.publishEvent('submitText', text);\n\n        return false;\n      }\n    );\n\n    MindMeldSearchInput.publishEvent('init');\n  };\n\n  /**\n   * Set whether the search text is considered finalized or not.\n   * Non-final text is de-emphasized.\n   */\n  MindMeldSearchInput.setFinal = function setFinal (isFinal) {\n    if (isFinal) {\n      textElement.classList.remove('interim');\n    } else {\n      textElement.classList.add('interim');\n    }\n  };\n\n  /**\n   * Get the text of the search input.\n   */\n  MindMeldSearchInput.getText = function getText () {\n    return textElement.querySelector('span').innerHTML;\n  };\n\n  /**\n   * Sets the text of the search input. Use isFinal boolean to\n   * indicate whether the text is finalized or not\n   */\n  MindMeldSearchInput.setText = function setText (text, isFinal) {\n    MindMeldSearchInput.setFinal(isFinal);\n    textElement.querySelector('span').innerHTML = text;\n  };\n\n\n  // Event Dispatcher\n  var subscriptions = {};\n\n  /**\n  * Subscribe to search input events\n  */\n  MindMeldSearchInput.on = function on (eventName, callback, context) {\n    if (! subscriptions[eventName]) {\n      subscriptions[eventName] = [];\n    }\n    var subscription = {\n      callback: callback,\n      context: context\n    };\n    subscriptions[eventName].push(subscription);\n  };\n\n  /**\n  * Publish microphone events to subscribers\n  */\n  MindMeldSearchInput.publishEvent = function publishEvent (eventName /*, args...*/) {\n    var subscribers = subscriptions[eventName];\n    if (subscribers !== undefined) {\n      var args = Array.prototype.slice.call(arguments, 1);\n      subscribers.forEach(\n        function invokeCallback (subscription) {\n          var context = subscription.context || this;\n          subscription.callback.apply(context , args);\n        }\n      );\n    }\n  };\n}());\n"],"sourceRoot":"/source/"}